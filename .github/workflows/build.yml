name: CMake Build and Release

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            libgl1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libxcursor-dev \
            libxinerama-dev \
            zip

      - name: Configure CMake (Linux)
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..

      - name: Build (Linux)
        run: |
          cd build
          cmake --build . --config Release

      - name: Zip Linux executable only
        run: |
          cd build
          # Replace 'game' with your actual executable name
          if [ -f game ]; then
            zip -j ../linux-x86_64.zip game
          else
            echo "Executable not found!"
            exit 1
          fi
          cd ..

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: linux-x86_64.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure CMake (Windows)
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..

      - name: Build (Windows)
        run: |
          cd build
          cmake --build . --config Release

      - name: Zip Windows executable only
        run: |
          # Adjust path if using multi-config generator
          $exe = "build\Release\game.exe"
          if (Test-Path $exe) {
            Compress-Archive -Path $exe -DestinationPath windows-x86_64.zip -Force
          } else {
            Write-Error "Executable not found at $exe"
            exit 1
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: windows-x86_64.zip

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-x86_64
          path: .

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-x86_64
          path: .

      - name: Create tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n1)

          if [ -z "$latest_tag" ]; then
            new_tag="v1.0.0"
          else
            tag_core=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$tag_core"
            minor=${minor:-0}
            patch=${patch:-0}
            patch=$((patch+1))
            new_tag="v$major.$minor.$patch"
          fi

          echo "New tag: $new_tag"
          git tag $new_tag
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git $new_tag
          echo "tag=$new_tag" >> $GITHUB_OUTPUT
          sleep 5

      - name: Create GitHub Release with artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: Automated release from GitHub Actions
          files: |
            linux-x86_64.zip
            windows-x86_64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}